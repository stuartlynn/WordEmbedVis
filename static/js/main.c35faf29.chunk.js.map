{"version":3,"sources":["components/EmbeddingVisRow.js","App.js","logo.svg","components/EmbeddingVis.js","serviceWorker.js","index.js"],"names":["EmbeddingVisRow","word","embedding","style","scale","d3","domain","interpolator","className","border","flex","display","flexDirection","map","val","backgroundColor","height","width","defaultProps","App","useState","words","setWords","equationResults","setEquationResults","embeddings","setEmbeddings","useEffect","just_words","replace","split","m","trim","join","fetch","toLowerCase","then","r","json","length","find","res","key","filter","p","console","log","equations","s","match","embedLookup","reduce","e","eqnResults","equation","reworkedEqn","Object","keys","forEach","result","values","v","i","eval","err","a","value","onChange","target","justifyContent","alignItems","emb","module","exports","Array","Math","random","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c35faf29.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport useComponentSize from \"@rehooks/component-size\";\n\nexport default function EmbeddingVisRow({ word, embedding, style }) {\n    const scale = d3\n        .scaleDiverging()\n        .domain([-1, 0, 1])\n        .interpolator(d3.interpolatePuOr);\n    return (\n        <div className=\"embedding-vis-row\" style={style}>\n            <h2>{word}</h2>\n            <div\n                style={{\n                    border: \"1px solid grey\",\n                    flex: 1,\n                    display: \"flex\",\n                    flexDirection: \"row\"\n                }}\n            >\n                {embedding.map(val => (\n                    <div\n                        className=\"element\"\n                        style={{\n                            backgroundColor: scale(val),\n                            flex: \"grow\",\n                            height: \"100%\",\n                            width: `${1000 / 300}px`\n                        }}\n                    ></div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nEmbeddingVisRow.defaultProps = {\n    style: {\n        width: \"1000px\",\n        height: \"200px\",\n        display: \"flex\",\n        flexDirection: \"column\"\n    }\n};\n","import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport EmbeddingVis from \"./components/EmbeddingVis\";\nimport EmbeddingVisRow from \"./components/EmbeddingVisRow\";\n\nimport \"./App.css\";\n\nfunction App() {\n    const [words, setWords] = useState(\"\");\n    const [equationResults, setEquationResults] = useState([]);\n    const [embeddings, setEmbeddings] = useState([]);\n\n    useEffect(() => {\n        const just_words = words\n            .replace(\"+\", \",\")\n            .replace(\"-\", \",\")\n            .split(\",\")\n            .map(m => m.trim())\n            .join(\",\");\n\n        fetch(\n            `https://smooshr.stuartlynn.me/embedding/${just_words.toLowerCase()}`\n        )\n            .then(r => r.json())\n            .then(r => {\n                if (r.length > 0) {\n                    setEmbeddings(\n                        just_words\n                            .split(\",\")\n                            .map(word => r.find(res => res.key === word))\n                            .filter(p => p)\n                    );\n                }\n            });\n    }, [words]);\n\n    console.log(\"embeds \", embeddings);\n\n    useEffect(() => {\n        const equations = words.split(\",\").filter(s => s.match(/[+-]/));\n        const embedLookup = embeddings.reduce(\n            (r, e) => ({ ...r, [e.key]: e.embedding }),\n            {}\n        );\n        console.log(equations);\n        const eqnResults = equations\n            .map(equation => {\n                let reworkedEqn = equation;\n                Object.keys(embedLookup).forEach(key => {\n                    reworkedEqn = reworkedEqn.replace(\n                        key,\n                        `embedLookup[\\'${key}\\'][$i]`\n                    );\n                });\n                let result = null;\n                try {\n                    result = Object.values(embedLookup)[0].map((v, i) =>\n                        eval(reworkedEqn.replace(/\\$i/g, i))\n                    );\n                    console.log(\"result \", result);\n                } catch (err) {\n                    console.log(\"not a real equation\");\n                }\n                return { key: equation, embedding: result };\n            })\n            .filter(a => a.embedding);\n        setEquationResults(eqnResults);\n        // const result = Object.values[embedLookup][0].map((e, i) => eval());\n\n        //        equations.map( (equation)=>{\n        //        equation.\n        //      })\n    }, [embeddings]);\n\n    return (\n        <div className=\"App\">\n            <input value={words} onChange={e => setWords(e.target.value)} />\n            <div\n                className=\"embeddings\"\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"space-between\",\n                    alignItems: \"center\"\n                }}\n            >\n                {embeddings.map(embedding => (\n                    <EmbeddingVisRow\n                        key={embedding.key}\n                        embedding={embedding.embedding}\n                        word={embedding.key}\n                    />\n                ))}\n                {equationResults.map(emb => (\n                    <EmbeddingVisRow\n                        key={emb.key}\n                        word={emb.key}\n                        embedding={emb.embedding}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { useRef } from \"react\";\nimport { scaleLinear } from \"d3-scale\";\nimport useComponentSize from \"@rehooks/component-size\";\n\nexport default function EmbeddingVis({ word, embedding, style }) {\n    let ref = useRef(null);\n    let size = useComponentSize(ref);\n\n    const x_coords = [...Array(embedding.length)].map((_, i) =>\n        Math.cos((i * Math.PI * 2) / embedding.length)\n    );\n    const y_coords = [...Array(embedding.length)].map((_, i) =>\n        Math.sin((i * Math.PI * 2) / embedding.length)\n    );\n    const base_radius = size.width / 3.0;\n    const delta_radius_scale = 100;\n\n    const path = embedding\n        .map(\n            (val, index) =>\n                `${index == 0 ? \"M\" : \"L\"}${x_coords[index] *\n                    (base_radius + val * delta_radius_scale)} ${y_coords[\n                    index\n                ] *\n                    (base_radius + val * delta_radius_scale)}`\n        )\n        .join(\" \");\n    return (\n        <div ref={ref} className=\"embedding-vis\" style={style}>\n            <h2>{word}</h2>\n            <svg style={{ width: \"100%\", height: \"100%\" }}>\n                <g\n                    transform={`matrix(1 0 0 -1 ${size.width *\n                        0.5} ${size.height * 0.5})`}\n                >\n                    <path d={path} />\n                </g>\n            </svg>\n        </div>\n    );\n}\n\nEmbeddingVis.defaultProps = {\n    style: { width: \"500px\", height: \"500px\", border: \"1px solid\" },\n    embedding: [...Array(300)].map(() => (Math.random() - 0.5) * 2)\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}